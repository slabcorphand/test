package jp.co.vermore.mapper;

import java.util.Date;
import java.util.List;

import jp.co.vermore.entity.UsefulMessage;
import jp.co.vermore.entity.UsefulMessageExample;
import jp.co.vermore.form.admin.UsefulMessageListForm;
import org.apache.ibatis.annotations.Param;

public interface UsefulMessageMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int countByExample(UsefulMessageExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int deleteByExample(UsefulMessageExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int insert(UsefulMessage record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int insertSelective(UsefulMessage record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    List<UsefulMessage> selectByExample(UsefulMessageExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    UsefulMessage selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") UsefulMessage record, @Param("example") UsefulMessageExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") UsefulMessage record, @Param("example") UsefulMessageExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(UsefulMessage record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table useful_message
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(UsefulMessage record);
    int insertUsefulMessage(UsefulMessage usefulMessage);

    int deleteUsefulMessage(UsefulMessage usefulMessage);

    int updateUsefulMessage(UsefulMessage usefulMessage);

    UsefulMessage getUsefulMessageByUuid(String uuid);

    List<UsefulMessage> getUsefulMessageAll();

    List<UsefulMessage> getUsefulMessageAllForTop( String nowMin,String nextMin);

    List<UsefulMessage> getUsefulMessageJsonAll(int type,String nowMin,String nextMin,int limit, int offset);

    List<UsefulMessage> getUsefulMessageJsonAllByType(int type,String nowMin,String nextMin);

    UsefulMessage getUsefulMessageByIdAndType(long id,int type);

    List<UsefulMessage> getUsefulMessageEventAll(int type1,int type2,String tomorrow,String today,int limit, int offset);

    List<UsefulMessage> getUsefulMessageList(long id);

    List<UsefulMessage> getUsefulMessageMapperPre(Date date, String nowMin, String nextMin);

    List<UsefulMessage> getUsefulMessageMapperNext(Date date,String nowMin,String nextMin);

    List<UsefulMessage> getUsefulMessageMapperCategory(int type,int limit,int offset);

    List<UsefulMessage> getUsefulMessageMapperAllByCondition(UsefulMessageListForm form);

    int getUsefulMessageMapperCountByCondition(UsefulMessageListForm form);

    int getUsefulMessageMapperCount();

    List<UsefulMessage> getStudioUsefulMessageMapperList(int type, int sortScore, String tomorrow,String today);

    List<UsefulMessageMapper> getStudioUsefulMessageMapperListAll(Byte type, int limit, int offset);

    List<UsefulMessage> getStudioUsefulMessageMapperALL(int type);

    List<UsefulMessageMapper> getStudioAllByCondition(UsefulMessageListForm form);

    int getStudioCountByCondition(UsefulMessageListForm form);

    int getStudioCount();

    UsefulMessageMapper getUsefulMessageMapperById(@Param("id") Long id);
}